<?php
require_once 'System.php';
require_once 'PHPUnit/Autoload.php';
require_once 'File/Passwd/Authbasic.php';

/**
 * TestCase for File_Passwd_AuthbasicTest class
 * Generated by PHPEdit.XUnit Plugin
 * 
 */
class File_Passwd_AuthbasicTest extends PHPUnit_Framework_TestCase {

    var $pwd;
    protected $exp_file;

    /**
     * Called before the test functions will be executed this function is defined in PHPUnit_Framework_TestCase  and overwritten here
     * @access protected
     */
    function setUp(){
        // Declaring GLOBALS isn't the right way to do this, but I'm just
        // moving them from the top of the file to here as a quick means
        // to get the tests running.
        $GLOBALS['tmpfile'] = System::mktemp();
        $GLOBALS['user']    = array(
            'mike' => 'q4M4mpfilkNnU',
            'pete' => 'dS80VTLQHZ6VM',
            'mary' => 'jHSiqFjaEiKPM'
        );

        $this->exp_file = dirname(__FILE__) . '/passwd.authbasic.txt';
        $this->pwd = new File_Passwd_Authbasic();
    }
    
    /**
     * Called after the test functions are executed this function is defined in PHPUnit_Framework_TestCase  and overwritten here
     * @access protected
     */
    function tearDown(){
        $this->pwd = null;
    }
    
    /**
     * Regression test for File_Passwd_Authbasic.File_Passwd_Authbasic method
     * @access public
     */
    function testFile_Passwd_Authbasic(){
        $this->assertInstanceOf('File_Passwd_Authbasic', $this->pwd);
    }
    
    /**
     * Regression test for File_Passwd_Authbasic.save method
     * @access public
     */
    function testsave(){
        $this->pwd->setFile($GLOBALS['tmpfile']);
        $this->pwd->_users = $GLOBALS['user'];
        $r = $this->pwd->save();
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r, 'save() should return TRUE.');
        $this->assertFileEquals($this->exp_file, $GLOBALS['tmpfile']);
    }
    
    /**
     * Regression test for File_Passwd_Authbasic.addUser method
     * @access public
     */
    function testaddUser(){
        $r = $this->pwd->addUser('add', 123);
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r, 'addUser() should return TRUE.');

        $r = $this->pwd->userExists('add');
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r, 'Could not find user that was just added.');
    }
    
    /**
     * Regression test for File_Passwd_Authbasic.changePasswd method
     * @access public
     */
    function testchangePasswd(){
        $this->pwd->addUser('change', 123);
        $r = $this->pwd->changePasswd('change', 'abc');
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r, 'changePasswd() success did not return TRUE.');
        $r = $this->pwd->verifyPasswd('change', 'abc');
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r, 'It seems password was not really changed.');
    }
    
    /**
     * Regression test for File_Passwd_Authbasic.verifyPasswd method
     * @access public
     */
    function testverifyPasswd(){
        // DES
        $e = $this->pwd->setMode('des');
        if (strToUpper(substr(PHP_OS, 0,3)) == 'WIN') {
            $this->assertInstanceOf('PEAR_Error', $e);
        } else {
            if (PEAR::isError($e)) {
                $this->fail($e->getMessage());
            }
            $this->assertTrue($e);
            $r = $this->pwd->addUser('desuser', 12345);
            if (PEAR::isError($r)) {
                $this->fail($r->getMessage());
            }
            $r = $this->pwd->verifyPasswd('desuser', 12345);
            if (PEAR::isError($r)) {
                $this->fail($r->getMessage());
            }
            $this->assertTrue($r, 'verifyPassword(desuser, right password)');
            $r = $this->pwd->verifyPasswd('desuser', '');
            if (PEAR::isError($r)) {
                $this->fail($r->getMessage());
            }
            $this->assertFalse($r, 'verifyPassword(desuser, wrong password)');
        }
        // SHA
        $this->pwd->setMode('sha');
        $this->pwd->addUser('shauser', 12345);
        $r = $this->pwd->verifyPasswd('shauser', 12345);
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r, 'verifyPassword(shauser, right password)');
        $r = $this->pwd->verifyPasswd('shauser', '');
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertFalse($r, 'verifyPassword(shauser, wrong password)');
        // MD5
        $this->pwd->setMode('md5');
        $this->pwd->addUser('md5user', 12345);
        $r = $this->pwd->verifyPasswd('md5user', 12345);
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r, 'verifyPassword(md5user, right password)');
        $r = $this->pwd->verifyPasswd('md5user', 2);
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertFalse($r, 'verifyPassword(md5user, wrong password)');
        $r = $this->pwd->verifyPasswd('nobody', 0);
        if (!PEAR::isError($r)) {
            $this->fail('verifyPasswd() did not return error for nonexistent user.');
        }
        $this->assertEquals("User 'nobody' doesn't exist.", $r->getMessage());
    }
    
    /**
     * Regression test for File_Passwd_Authbasic.getMode method
     * @access public
     */
    function testgetMode(){
        $this->pwd->setMode('md5');
        $this->assertEquals('md5', $this->pwd->getMode());
    }
    
    /**
     * Regression test for File_Passwd_Authbasic.listModes method
     * @access public
     */
    function testlistModes(){
        $array = array('md5' => 'm', 'des' => 'd', 'sha' => 's');
        if (strToUpper(substr(PHP_OS, 0,3)) == 'WIN') {
            unset($array['des']);
        }
        $this->assertEquals(array_keys($array), $this->pwd->listModes());
    }
    
    /**
     * Regression test for File_Passwd_Authbasic.setMode method
     * @access public
     */
    function testsetMode(){
        $this->pwd->setMode('md5');
        $this->assertEquals('md5', $this->pwd->getMode());
        $r = $this->pwd->setMode('no');
        if (!PEAR::isError($r)) {
            $this->fail('setMode() did not return error for nonexistent mode.');
        }
        $this->assertEquals("Encryption mode 'no' not supported.", $r->getMessage());
    }
    
    /**
     * Regression test for File_Passwd_Authbasic.parse method
     * @access public
     */
    function testparse(){
        $this->pwd->setFile($this->exp_file);
        $r = $this->pwd->load();
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r);
        $this->assertEquals($GLOBALS['user'], $this->pwd->_users);
    }
    
    function teststaticAuth(){
        $type = 'authbasic';
        $r = File_Passwd::staticAuth($type, $this->exp_file, 'mike', 123, 'des');
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r, 'right user, right password');
        $r = File_Passwd::staticAuth($type, $this->exp_file, 'mike', 'abc', 'des');
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertFalse($r, 'right user, wrong password');

        $r = File_Passwd::staticAuth($type, $this->exp_file, 'nonexist', 'asd', 'des');
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertFalse($r, 'nonexistent user');
    }
}
?>
