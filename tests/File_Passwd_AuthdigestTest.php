<?php
require_once 'System.php';
require_once 'File/Passwd/Authdigest.php';

/**
 * TestCase for File_Passwd_AuthdigestTest class
 * Generated by PHPEdit.XUnit Plugin
 * 
 */
class File_Passwd_AuthdigestTest extends PHPUnit_Framework_TestCase {

    var $pwd;
    protected $exp_file;
    
    /**
     * Called before the test functions will be executed this function is defined in PHPUnit_Framework_TestCase  and overwritten here
     * @access protected
     */
    function setUp(){
        // Declaring GLOBALS isn't the right way to do this, but I'm just
        // moving them from the top of the file to here as a quick means
        // to get the tests running.
        $GLOBALS['tmpfile'] = System::mktemp();
        $GLOBALS['user']    = array (
            'mike' => array('realm1' => 'bbcaa08c9944893b29376d9536a5c0d8'),
            'pete' => array('realm1' => 'd5ae80288114955ea9d71fcbd8ca4b7d'),
            'mary' => array('realm1' => 'f6b5c730306e1860292640d7be039680')
        );

        $this->exp_file = dirname(__FILE__) . '/passwd.authdigest.txt';
        $this->pwd = new File_Passwd_Authdigest();
    }
    
    /**
     * Called after the test functions are executed this function is defined in PHPUnit_Framework_TestCase  and overwritten here
     * @access protected
     */
    function tearDown(){
        $this->pwd = null;
    }
    
    /**
     * Regression test for File_Passwd_Authdigest.File_Passwd_Authdigest method
     * @access public
     */
    function testFile_Passwd_Authdigest(){
        $this->assertInstanceOf('File_Passwd_Authdigest', $this->pwd);
    }
    
    /**
     * Regression test for File_Passwd_Authdigest.save method
     * @access public
     */
    function testsave(){
        $this->pwd->setFile($GLOBALS['tmpfile']);
        $this->pwd->_users = $GLOBALS['user'];
        $r = $this->pwd->save();
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r);
        $this->assertFileEquals($this->exp_file, $GLOBALS['tmpfile']);
    }
    
    /**
     * Regression test for File_Passwd_Authdigest.addUser method
     * @access public
     */
    function testaddUser(){
        $r = $this->pwd->addUser('add', 'realm2', 123);
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r, 'addUser() should return TRUE.');

        $r = $this->pwd->userExists('add');
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r, 'Could not find user that was just added.');
    }
    
    /**
     * Regression test for File_Passwd_Authdigest.changePasswd method
     * @access public
     */
    function testchangePasswd(){
        $this->pwd->addUser('change', 'realm2', 123);
        $r = $this->pwd->changePasswd('change', 'realm2', 'abc');
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r, 'changePasswd() success did not return TRUE.');
        $r = $this->pwd->verifyPasswd('change', 'realm2', 'abc');
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r, 'It seems password was not really changed.');
    }
    
    /**
     * Regression test for File_Passwd_Authdigest.verifyPasswd method
     * @access public
     */
    function testverifyPasswd(){
        $this->pwd->addUser('verify', 'realm2', 12345);
        $r = $this->pwd->verifyPasswd('verify', 'realm2', 12345);
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r, 'verifyPassword(right password)');
        $r = $this->pwd->verifyPasswd('verify', 'realm2', 0);
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertFalse($r, 'verifyPassword(wrong password)');
        $r = $this->pwd->verifyPasswd('nobody', 'realm2', 0);
        if (!PEAR::isError($r)) {
            $this->fail('verifyPasswd() did not return error for nonexistent user.');
        }
        $this->assertEquals("User 'nobody' doesn't exist in realm 'realm2'.", $r->getMessage());
    }
    
    /**
     * Regression test for File_Passwd_Authdigest.listUserInRealm method
     * @access public
     */
    function testlistUserInRealm(){
        $this->pwd->_users = $GLOBALS['user'];
        $array = array(
            'realm1' => array(
                'mike' => 'bbcaa08c9944893b29376d9536a5c0d8',
                'pete' => 'd5ae80288114955ea9d71fcbd8ca4b7d',
                'mary' => 'f6b5c730306e1860292640d7be039680'
            )
        );
        $this->assertEquals($array, $this->pwd->listUserInRealm('realm1'));
        $this->assertEquals($array, $this->pwd->listUserInRealm());
    }
    
    /**
     * Regression test for File_Passwd_Authdigest.userInRealm method
     * @access public
     */
    function testuserInRealm(){
        $this->pwd->_users = $GLOBALS['user'];
        $this->assertTrue($this->pwd->userInRealm('mike', 'realm1'));
        $this->assertFalse($this->pwd->userInRealm('sam', 'realm1'));
    }
    
    /**
     * Regression test for File_Passwd_Authdigest.delUserInRealm method
     * @access public
     */
    function testdelUserInRealm(){
        $this->pwd->_users = $GLOBALS['user'];
        $this->assertTrue($this->pwd->delUserInRealm('mike', 'realm1'));
        $this->assertTrue(PEAR::isError($this->pwd->delUserInRealm('sam', 'realm2')));
    }
    
    /**
     * Regression test for File_Passwd_Authdigest.parse method
     * @access public
     */
    function testparse(){
        $this->pwd->setFile($this->exp_file);
        $r = $this->pwd->load();
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r);
        $this->assertEquals($GLOBALS['user'], $this->pwd->_users);
    }
    
    function teststaticAuth(){
        $type = 'authdigest';
        $r = File_Passwd::staticAuth($type, $this->exp_file, 'mike', 123, 'realm1');
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r, 'right user, right password');
        $r = File_Passwd::staticAuth($type, $this->exp_file, 'mike', 'abc', 'realm1');
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertFalse($r, 'right user, wrong password');

        $r = File_Passwd::staticAuth($type, $this->exp_file, 'nonexist', 'asd', 'norealm');
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertFalse($r, 'nonexistent user');
    }
}

?>
