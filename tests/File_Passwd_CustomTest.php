<?php
require_once 'System.php';
require_once 'PHPUnit/Autoload.php';
require_once 'File/Passwd/Custom.php';

/**
 * TestCase for File_Passwd_CustomTest class
 * Generated by PHPEdit.XUnit Plugin
 * 
 */
class File_Passwd_CustomTest extends PHPUnit_Framework_TestCase {

    var $pwd;
    protected $exp_file;
    
    /**
     * Called before the test functions will be executed this function is defined in PHPUnit_Framework_TestCase  and overwritten here
     * @access protected
     */
    function setUp(){
        // Declaring GLOBALS isn't the right way to do this, but I'm just
        // moving them from the top of the file to here as a quick means
        // to get the tests running.
        $GLOBALS['tmpfile'] = System::mktemp();
        $GLOBALS['map']     = array(
            'extra1', 'extra2', 'extra3'
        );
        $GLOBALS['user']   = array(
            'mike' => array(
                'pass' =>   'mikespass',
            ),
            'pete' => array(
                'pass' =>   'petespass',
            ),
            'mary' => array(
                'pass' =>   'maryspass',
            )
        );

        $this->exp_file = dirname(__FILE__) . '/passwd.custom.txt';
        $this->pwd = new File_Passwd_Custom();
    }
    
    /**
     * Called after the test functions are executed this function is defined in PHPUnit_Framework_TestCase  and overwritten here
     * @access protected
     */
    function tearDown(){
        $this->pwd = null;
    }
    
    /**
     * Regression test for File_Passwd_Custom.setDelim method
     * @access public
     */
    function testsetDelim(){
        $this->pwd->setDelim('abc');
        $this->assertEquals('a', $this->pwd->getDelim());
    }
    
    /**
     * Regression test for File_Passwd_Custom.getDelim method
     * @access public
     */
    function testgetDelim(){
        $this->pwd->setDelim('%');
        $this->assertEquals('%', $this->pwd->getDelim());
    }
    
    /**
     * Regression test for File_Passwd_Custom.setEncFunc method
     * @access public
     */
    function testsetEncFunc(){
        $this->assertTrue(PEAR::isError($this->pwd->setEncFunc('nonexistant')));
        $this->assertFalse(PEAR::isError($this->pwd->setEncFunc('md5')));
    }
    
    /**
     * Regression test for File_Passwd_Custom.getEncFunc method
     * @access public
     */
    function testgetEncFunc(){
        $this->pwd->setEncFunc(array('File_Passwd', 'crypt_plain'));
        $this->assertEquals('File_Passwd::crypt_plain', $this->pwd->getEncFunc());
    }
    
    /**
     * Regression test for File_Passwd_Custom.useMap method
     * @access public
     */
    function testuseMap(){
        $this->pwd->useMap(false);
        $this->assertFalse($this->pwd->useMap());
        $this->pwd->useMap(true);
        $this->assertTrue($this->pwd->useMap());
    }
    
    /**
     * Regression test for File_Passwd_Custom.setMap method
     * @access public
     */
    function testsetMap(){
        $this->pwd->setMap($GLOBALS['map']);
        $this->assertEquals($GLOBALS['map'], $this->pwd->getMap());
    }
    
    /**
     * Regression test for File_Passwd_Custom.getMap method
     * @access public
     */
    function testgetMap(){
        $this->pwd->setMap(array('prop'));
        $this->assertEquals(array('prop'), $this->pwd->getMap());
    }
    
    /**
     * Regression test for File_Passwd_Custom.save method
     * @access public
     */
    function testsave(){
        $this->pwd->setFile($GLOBALS['tmpfile']);

        $this->pwd->setDelim('|');
        $this->pwd->setEncFunc(array('File_Passwd', 'crypt_plain'));
        foreach ($GLOBALS['user'] as $user => $pass_r) {
            $this->pwd->addUser($user, $pass_r['pass']);
        }

        $r = $this->pwd->save();
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r);
        $this->assertFileEquals($this->exp_file, $GLOBALS['tmpfile']);
    }
    
    /**
     * Regression test for File_Passwd_Custom.addUser method
     * @access public
     */
    function testaddUser(){
        $this->pwd->useMap(true);
        $this->pwd->setEncFunc('md5');

        $r = $this->pwd->addUser('testadd', 'pass');
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r, 'addUser() should return TRUE.');

        $r = $this->pwd->userExists('testadd');
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r, 'Could not find user that was just added.');
    }
    
    /**
     * Regression test for File_Passwd_Custom.modUser method
     * @access public
     */
    function testmodUser(){
        $this->pwd->useMap(true);
        $this->pwd->setEncFunc('md5');
        $this->pwd->addUser('testmod', 'pass');
        $r = $this->pwd->modUser('testmod', array('pass' => 'newpass'));
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r, 'modUser() should return TRUE.');

        $this->assertEquals('newpass', $this->pwd->_users['testmod']['pass']);
    }
    
    /**
     * Regression test for File_Passwd_Custom.changePasswd method
     * @access public
     */
    function testchangePasswd(){
        $this->pwd->useMap(true);
        $this->pwd->setEncFunc('md5');
        $this->pwd->addUser('change', 123);
        $r = $this->pwd->changePasswd('change', 'abc');
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r, 'changePasswd() success did not return TRUE.');
        $r = $this->pwd->verifyPasswd('change', 'abc');
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r, 'It seems password was not really changed.');
    }
    
    /**
     * Regression test for File_Passwd_Custom.verifyPasswd method
     * @access public
     */
    function testverifyPasswd(){
        $this->pwd->addUser('verify', 12345);
        $r = $this->pwd->verifyPasswd('verify', 12345);
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r, 'verifyPassword(right password)');
        $r = $this->pwd->verifyPasswd('verify', 0);
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertFalse($r, 'verifyPassword(wrong password)');
        $r = $this->pwd->verifyPasswd('nobody', 0);
        if (!PEAR::isError($r)) {
            $this->fail('verifyPasswd() did not return error for nonexistent user.');
        }
        $this->assertEquals("User 'nobody' doesn't exist.", $r->getMessage());
    }

    /**
     * Regression test for File_Passwd_Custom.parse method
     * @access public
     */
    function testparse(){
        $this->pwd->useMap(true);
        $this->pwd->setFile($this->exp_file);
        $this->pwd->setDelim('|');
        $r = $this->pwd->load();
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r);
        $this->assertEquals($GLOBALS['user'], $this->pwd->_users);
    }
    
    function teststaticAuth(){
        $type = 'Custom';
        $r = File_Passwd::staticAuth($type, $this->exp_file, 'mike', 'mikespass', array(array('File_Passwd', 'crypt_plain'), '|'));
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertTrue($r, 'right user, right password');
        $r = File_Passwd::staticAuth($type, $this->exp_file, 'mike', 'notpass', array(array('File_Passwd', 'crypt_plain'), '|'));
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertFalse($r, 'right user, wrong password');

        $r = File_Passwd::staticAuth($type, $this->exp_file, 'nonexist', 'mikespass', array(array('File_Passwd', 'crypt_plain'), '|'));
        if (PEAR::isError($r)) {
            $this->fail($r->getMessage());
        }
        $this->assertFalse($r, 'nonexistent user');

        $r = File_Passwd::staticAuth($type, $this->exp_file, 'mike', 'mikespass');
        if (!PEAR::isError($r)) {
            $this->fail('staticAuth() did not return error for bad parameters.');
        }
        $this->assertEquals("Insufficient options.", $r->getMessage());
    }
    
}

?>
