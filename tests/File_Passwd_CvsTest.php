<?php
require_once 'System.php';
require_once 'File/Passwd/Cvs.php';

/**
 * TestCase for File_Passwd_CvsTest class
 * Generated by PHPEdit.XUnit Plugin
 * 
 */
class File_Passwd_CvsTest extends PHPUnit_Framework_TestCase {

    var $pwd;
    protected $exp_file;

    /**
     * Called before the test functions will be executed this function is defined in PHPUnit_Framework_TestCase  and overwritten here
     * @access protected
     */
    function setUp(){
        // Declaring GLOBALS isn't the right way to do this, but I'm just
        // moving them from the top of the file to here as a quick means
        // to get the tests running.
        $GLOBALS['tmpfile'] = System::mktemp();
        $GLOBALS['user']    = array(
            'mike' => array( 'passwd' => 'Tlu5Cq9nQ48Qc', 'system' => 'mike'),
            'pete' => array( 'passwd' => '6j8u02M0HVycY'),
            'mary' => array( 'passwd' => 'H7YIMXbnZ0Nyo', 'system' => 'marianne')
        );

        $this->exp_file = dirname(__FILE__) . '/passwd.cvs.txt';
        $this->pwd = new File_Passwd_Cvs();
    }
    
    /**
     * Called after the test functions are executed this function is defined in PHPUnit_Framework_TestCase  and overwritten here
     * @access protected
     */
    function tearDown(){
        $this->pwd = null;
    }
    
    /**
     * Regression test for File_Passwd_Cvs.File_Passwd_Cvs method
     * @access public
     */
    function testFile_Passwd_Cvs(){
        $this->assertInstanceOf('File_Passwd_Cvs', $this->pwd);
    }
    
    /**
     * Regression test for File_Passwd_Cvs.save method
     * @access public
     */
    function testsave(){
        $this->pwd->_users = $GLOBALS['user'];
        $this->pwd->setFile($GLOBALS['tmpfile']);
        $r = $this->pwd->save();

        $this->assertTrue($r);
        $this->assertFileEquals($this->exp_file, $GLOBALS['tmpfile']);
    }
    
    /**
     * Regression test for File_Passwd_Cvs.addUser method
     * @access public
     */
    function testaddUser(){
        $r = $this->pwd->addUser('add', 123);

        $this->assertTrue($r, 'addUser() should return TRUE.');

        $r = $this->pwd->userExists('add');

        $this->assertTrue($r, 'Could not find user that was just added.');
    }
    
    /**
     * Regression test for File_Passwd_Cvs.changePasswd method
     * @access public
     */
    function testchangePasswd(){
        $this->pwd->addUser('change', 123);
        $r = $this->pwd->changePasswd('change', 'abc');

        $this->assertTrue($r, 'changePasswd() success did not return TRUE.');
        $r = $this->pwd->verifyPasswd('change', 'abc');

        $this->assertTrue($r, 'It seems password was not really changed.');
    }
    
    /**
     * Regression test for File_Passwd_Cvs.verifyPasswd method
     * @access public
     */
    function testverifyPasswd(){
        $this->pwd->addUser('verify', 12345);
        $r = $this->pwd->verifyPasswd('verify', 12345);

        $this->assertTrue($r, 'verifyPassword(right password)');
        $r = $this->pwd->verifyPasswd('verify', 0);

        $this->assertFalse($r, 'verifyPassword(wrong password)');
        try {
            $r = $this->pwd->verifyPasswd('nobody', 0);

            $this->fail('verifyPasswd() did not return error for nonexistent user.');
        } catch (File_Passwd_Exception $r) {
            $this->assertEquals("User 'nobody' doesn't exist.", $r->getMessage());
        }
    }
    
    /**
     * Regression test for File_Passwd_Cvs.changeSysUser method
     * @access public
     */
    function testchangeSysUser(){
        $this->pwd->addUser('chsys', 123, 'nobody');
        $this->assertTrue($this->pwd->changeSysUser('chsys', 'mike'));
        $this->assertEquals('mike', $this->pwd->_users['chsys']['system']);
    }
    
    /**
     * Regression test for File_Passwd_Cvs.generatePassword method
     * @access public
     */
    function testgeneratePassword(){
        $this->assertEquals('12IbR.gJ8wcpc', $this->pwd->generatePassword(123, '12IbR.gJ8wcpc'));
    }
    
    /**
     * Regression test for File_Passwd_Cvs.parse method
     * @access public
     */
    function testparse(){
        //$this->pwd->_users = array();
        $this->pwd->setFile($this->exp_file);
        $r = $this->pwd->load();

        $this->assertTrue($r);
        $this->assertEquals($GLOBALS['user'], $this->pwd->_users);
    }
    
    function teststaticAuth(){
        $type = 'cvs';
        $r = File_Passwd::staticAuth($type, $this->exp_file, 'mike', 123, 'des');

        $this->assertTrue($r, 'right user, right password');

        $r = File_Passwd::staticAuth($type, $this->exp_file, 'mike', 'abc', 'des');

        $this->assertFalse($r, 'right user, wrong password');

        $r = File_Passwd::staticAuth($type, $this->exp_file, 'nonexist', 'asd', 'des');

        $this->assertFalse($r, 'nonexistent user');
    }
}

?>
